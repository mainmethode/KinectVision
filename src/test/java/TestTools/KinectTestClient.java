package TestTools;


import de.rwth.i5.kinectvision.machinevision.FiducialDetectionResult;
import de.rwth.i5.kinectvision.machinevision.FiducialFinder;
import de.rwth.i5.kinectvision.machinevision.FrameHandler;
import de.rwth.i5.kinectvision.machinevision.model.DepthModel;
import de.rwth.i5.kinectvision.mqtt.KinectClient;
import georegression.struct.point.Point2D_F64;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.paho.client.mqttv3.MqttException;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

/**
 * Class used as an MQTT client for the Kinect data. It subscribes to the data generated by the Kinect.
 */
@Slf4j
public class KinectTestClient {
    private VideoPanel viewer;

    private KinectClient client;
    private short[] infra = new short[0];
    private DepthModel depth;

    public KinectTestClient(VideoPanel viewer, KinectClient client) {
        this.viewer = viewer;
        this.viewer.setClient(this);
        client.setFrameHandler(new FrameHandler() {
            @Override
            public void onDepthFrame(DepthModel o) {
                depth = o;
            }

            @Override
            public void OnInfraredFrame(short[] data) {
//                data = KinectDataStore.readInfraredData("infrared_1.bin");
                infra = data;
                //GrayF32 img = FiducialFinder.toGrayF32Image(data, 512, 424);
                // For visualisation
                BufferedImage buf = new BufferedImage(512, 424, BufferedImage.TYPE_4BYTE_ABGR);
                int idx = 0;
                int iv = 0;
                short sv = 0;
                byte bv = 0;
                int abgr;
                for (int i = 0; i < 512 * 424; i++) {
                    sv = data[i];
                    iv = sv >= 0 ? sv : 0x10000 + sv;
                    bv = (byte) ((iv & 0xfff8) >> 6);
                    abgr = bv + (bv << 8) + (bv << 16);
                    buf.setRGB(i % 512, (int) (i / 512), abgr);
                }

                ArrayList<FiducialDetectionResult> det = FiducialFinder.findFiducialsFromBytes(data);
                Graphics2D g = buf.createGraphics();
                g.setStroke(new BasicStroke(2));
                g.setColor(Color.GREEN);
                Point2D_F64 bound1;
                Point2D_F64 bound2;
                for (FiducialDetectionResult fiducialDetectionResult : det) {
                    for (int i = 0; i < fiducialDetectionResult.getBounds().size() - 1; i++) {
                        bound1 = fiducialDetectionResult.getBounds().get(i);
                        bound2 = fiducialDetectionResult.getBounds().get(i + 1);
                        //Draw line
                        g.drawLine(((int) bound1.x), (int) bound1.y, (int) bound2.x, (int) bound2.y);
                    }
                    if (fiducialDetectionResult.getBounds().size() > 1) {
                        bound1 = fiducialDetectionResult.getBounds().get(fiducialDetectionResult.getBounds().size() - 1);
                        bound2 = fiducialDetectionResult.getBounds().get(0);
                        g.drawLine(((int) bound1.x), (int) bound1.y, (int) bound2.x, (int) bound2.y);
                    }
                }

                if (viewer.videoTexture != null)
                    viewer.videoTexture.update(buf);


            }

            @Override
            public void onColorFrame(byte[] payload) {

            }
        });
        try {
            client.initialize();
        } catch (MqttException e) {
            e.printStackTrace();
        }
    }


    void saveDataClicked() {
        if (infra.length > 0) {
            KinectDataStore.saveInfraredData("C:\\Users\\Justin\\Desktop\\Kinect Bilder\\" + System.currentTimeMillis() + "ms_infra.bin", infra);
            infra = new short[0];
        }
        if (depth != null) {
            KinectDataStore.saveDepthData("C:\\Users\\Justin\\Desktop\\Kinect Bilder\\" + System.currentTimeMillis() + "ms_depth.bin", depth);
            depth = null;
        }
    }

    public void setClient(KinectClient client) {
        this.client = client;
    }
}

