package de.rwth.i5.kinectvision.mqtt;


import de.rwth.i5.kinectvision.machinevision.model.BoundingSphere;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttConnectOptions;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.springframework.boot.configurationprocessor.json.JSONArray;
import org.springframework.boot.configurationprocessor.json.JSONException;
import org.springframework.boot.configurationprocessor.json.JSONObject;

import javax.vecmath.Vector3d;
import java.util.ArrayList;

/**
 * Class used as an MQTT client for the Kinect data. It subscribes to the data generated by the Kinect.
 */
@Slf4j
public class SwevaClient {
    @Setter
    private String broker;
    @Setter
    private String clientId;
    double scale = 100;
    private MqttClient swevaClient;

    /**
     * Initialization method for the MQTT client. Connects to the broker.
     *
     * @throws MqttException
     */
    public void initialize() throws MqttException {
        //Initialize the Mqtt client and establish a connection
        swevaClient = new MqttClient(broker, clientId, null);
        MqttConnectOptions connOpts = new MqttConnectOptions();
        connOpts.setCleanSession(true);
        swevaClient.connect(connOpts);
    }

    public void publish(ArrayList<BoundingSphere> spheres, ArrayList<Vector3d> humanList) {
        try {
            JSONObject object = new JSONObject();
            JSONObject robot = new JSONObject();
            JSONObject humans = new JSONObject();

            JSONArray points = new JSONArray();

            humans.put("points", points);
            object.put("humans", humans);
            JSONArray pointsOneHum = new JSONArray();
            points.put(pointsOneHum);
            int count = 0;
            for (Vector3d vector3d : humanList) {
                if (count++ == 10) {
                    count = 0;
                    JSONArray singlePoint = new JSONArray();

                    singlePoint.put(((int) (vector3d.x * scale)));
                    singlePoint.put(((int) (vector3d.y * scale)));
                    singlePoint.put(((int) (vector3d.z * scale)));
                    pointsOneHum.put(singlePoint);
                }
            }
            JSONArray spheresArray = new JSONArray();
            for (BoundingSphere sphere : spheres) {
                JSONArray singleSphere = new JSONArray();

                singleSphere.put(((int) (sphere.getCenter().x * scale)));
                singleSphere.put(((int) (sphere.getCenter().y * scale)));
                singleSphere.put(((int) (sphere.getCenter().z * scale)));
                singleSphere.put(((int) (sphere.getRadius() * scale)));

                spheresArray.put(singleSphere);
            }


            robot.put("spheres", spheresArray);
            object.put("robot", robot);

            try {
                swevaClient.publish("sweva1", object.toString().getBytes(), 0, false);
            } catch (MqttException e) {
                e.printStackTrace();
            }
        } catch (JSONException e) {
            e.printStackTrace();
        }
    }
}
